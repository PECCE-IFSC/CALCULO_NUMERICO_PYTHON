# Cálculo numérico para engenharia elétrica com PYTHON
# Capítulo 4: Ajuste de curvas_PROPOSTO1
# Regressão - exercício proposto

import numpy as np
import matplotlib.pyplot as plt


# Regressão Linear
x = np.transpose([1, 1.1, 1.25, 1.5, 2, 2.2, 3.5, 5, 6, 6.5, 7, 8, 8.75, 9.5, 10])
y = np.transpose([10, 9, 8.9, 7, 6, 5.5, 4, 2, 1.5, 1.1, 1.05, 1, 1, 1.1, 0.95])

a = np.zeros(2)

n = len(x) # número de amostras
sx = sum(x) 
sy = sum(y) #soma
sx2 = sum(x*x) 
sxy = sum(x*y)
sy2 = sum(y*y)
a[0] = (n*sxy-sx*sy)/(n*sx2-sx**2)
a[1] = sy/n-a[0]*sx/n
r2 = ((n*sxy-sx*sy)/np.sqrt(n*sx2-sx**2)/np.sqrt(n*sy2-sy**2))**2
r = r2**0.5
print(a)

# gráfico
xp = np.linspace(min(x),max(x),10)
yp = a[0]*xp+a[1]
plt.plot(x,y,'o',markeredgecolor ='k',markerfacecolor = 'k',markersize = 8, label = '(x,y)')

plt.plot(xp,yp,'k-',linewidth = 2,label = 'grau 2')
plt.grid(True)
plt.xlabel('R (ohms)')
plt.ylabel('I (A)')


#POLYFIT
m=2
c = np.polyfit(x,y,m)  #ajusta por mínimos quadrados um polinômio de n grau
xx = np.linspace(x[0],x[-1],100) # numero de pontos para polinômio de grau maior
yy = np.polyval(c,xx)
plt.plot(xx,yy,'k--',linewidth = 2, label = 'grau 3')


m = 4
c = np.polyfit(x,y,m)  #ajusta por mínimos quadrados um polinômio de n grau
xx = np.linspace(x[0],x[-1],100) #numero de pontos para polinômio de grau maior
yy = np.polyval(c,xx)
plt.plot(xx,yy,'k.',linewidth = 4, label = 'grau 4')


m=5
c = np.polyfit(x,y,m)  #ajusta por mínimos quadrados um polinômio de n grau
xx = np.linspace(x[0],x[-1],100) # numero de pontos para polinômio de grau maior
yy = np.polyval(c,xx)
plt.plot(xx,yy,'r',linewidth = 2, label = 'grau 5')
plt.legend()

      
plt.rc('axes', titlesize=13)     
plt.rc('axes', labelsize=13)    
plt.rc('xtick', labelsize=13)    
plt.rc('ytick', labelsize=13)   
plt.rc('legend', fontsize=13)   

plt.show()
