# Cálculo numérico para engenharia elétrica com PYTHON
# Capítulo 2: Sistemas Lineares
# Método Direto: Decomposição LU
# Adaptado de cctmexico
# Referência: https://www.youtube.com/watch?v=FpVeXhAQg9w

from numpy import array, transpose, zeros, linalg
def LU_Decomposition_method(A, b):
    '''
    :param A: matriz aumentada numpy.array
    :param b: vetor numpy.array
    '''
    m = len(A)
    y = zeros(m, float)
    x = zeros(m, float)
    U = A
    L = zeros([m, m])
    for k in range(0, m):
        for r in range(0, m):
            if (k == r):
                L[k, r] = 1
            if (k < r):
                factor = (A[r, k]/A[k, k])
                L[r, k] = factor
                for c in range(0, m):
                    U[r, c] = A[r, c] - (factor * A[k, c])
    A = zeros([m, m])
    for r in range(0, m):
        for c in range(0, m):
            for k in range(0, m):
                A[r, c] += (L[r, k]*U[k, c])
    print('A')
    print(A)
    print('L')
    print(L)
    print()
    print('U')
    print(U)
    print()
    # RESOLUÇÃO DAS EQUAÇÕES MATRICIAIS
    ###################################
    y = linalg.solve(L, b)
    x = linalg.solve(U, y)
    ###################################
    f = 'SOLUÇÃO DO SISTEMA'
    print('-'*(len(f)+32))
    print(f'{f:^50}')
    print('-'*(len(f)+32))
    print('x =')
    print(x)
    print('Onde: ')
    for c in range (0, len(x)):
        print(f'\t x[{c}] = {x[c]} \n')


# Uso do método
A = array([[3, 1, 0, -1],
           [1, 3, 1, 1],
           [0, 1, 3, -1],
           [-1, 1, -1, 4]], float)
b = transpose([10, 15, 10, 0])
LU_Decomposition_method(A,b)
