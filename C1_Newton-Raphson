# Cálculo numérico para engenharia elétrica com PYTHON
# Capítulo 1: Raízes
# Método aberto: Newton-Raphson
# Diodo
# Adaptado de geeksforgeeks
# Referência: https://www.geeksforgeeks.org/program-for-newton-raphson-method/


def f(Id, n=2, k=1.3806 * (10 ** (-23)), V=24, T=300, q=1.6022 * (10 ** (-19)), Icr=31.9824 * (10 ** (-9)), R=10):
    '''
      Id = Corrente no diodo (A)
      n = Coeficiente de emissão
      k = Constante de Boltzmann
      V = Tensão da fonte (V)
      T = Temperatura de operação (K)
      q = Carga do elétron
      Icr = Corrente de condução reversa (A)
      R = Resistência (Ohms)
    '''
    import math as m
    return (n * (k * T / q)) * m.log((Id / Icr) + 1, m.e) + R * Id - V


def d(x):
    from scipy.misc import derivative
    return derivative(f, x)


def newtonRaphson(x, maxit=10, TOL=0.0001):
    a = f(x) / d(x)
    iter = 0
    while abs(a) > TOL and iter < maxit:
        a = f(x) / d(x)
        # x(i+1) = x(i) - f(x) / f'(x)
        x = x - a
        iter += 1
    return [x, iter]


# Exemplo
x0 = 2  # Valor inicial
ans = newtonRaphson(x0)
raiz = ans[0]
print(f'A raiz é {raiz:.5f}. Com {ans[1]} iterações.')

# Visualização
import numpy as np

ab = np.linspace(0, 5, 100)
ord = list()
for c in range(0, len(ab)):
    fx = f(ab[c])
    ord.append(fx)
import matplotlib.pyplot as plt

plt.plot(ab, ord, linewidth=1, color='k')
plt.plot(raiz, 0, 'ro')
plt.xlim(min(ab), max(ab))
plt.grid(True)
plt.title('f(x)')
plt.show()
