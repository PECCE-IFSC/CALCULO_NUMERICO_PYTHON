# Cálculo numérico para engenharia elétrica com PYTHON
# Capítulo 4: Ajuste de curvas_PROPOSTO2
# Diferentes métodos

import numpy as np
import matplotlib.pyplot as plt

H = np.array([-50,-5,5,75])
B = np.array([-300,-50,180,350])

x = H
y = B

# Newton
xx = 0
n = len(x)
b = np.zeros((n,n))
# atribui as variaveis dependentes à primeira coluna de b
b[:n,0] = y[:]
for j in range(1,n):
 for i in range(0,n-j+1):
  if i+j != n:
   b[i,j] = (b[i+1,j-1]-b[i,j-1])/(x[i+j]-x[i])
# usa as diferenças divididas finitas para interpolar
xt = 1
yint = b[0,0]
for j in range(0,n-1):
 xt = xt*(xx-x[j])
 yint = yint+b[0,j+1]*xt
print(f'por Newton, B = {yint:.4f} mT')# Valor da interpolação para H = 0 (A/m)

plt.plot(H,B,'o', label = '(H,B)')
plt.plot(0,yint, 's',label = 'por Newton')

# Lagrange

n = len(H) # número de amostras
if len(y) != n:
  print('x e y devem ter o mesmo tamanho')
s = 0
for i in range(0,n):
 produto = y[i]
 for j in range(0,n):
   if i != j:
    produto = produto*(xx-x[j])/(x[i]-x[j])
 s = s + produto
print(f'por Lagrange, B = {s:.4f} mT')


plt.plot(xx,s, 'd', label = 'por Lagrange')

# Interpolação polinomial
style = ['-', '--']
for n in range(2,4):
  c = np.polyfit(H,B, n)
  p = np.polyval(c,xx)
  print(f'por interpolação polinomial, n = {n}, B = {p:.4f} mT')
  plt.plot(xx,p,'^', label = f'polinomial, n = {n}' )
  h = np.linspace(min(H),max(H),100)
  plt.plot(h,np.polyval(c,h),f'k{style[n-2]}' ,label = f'polyfit, n = {n}')

plt.xlabel('H (A/m)')
plt.ylabel('B (mT)')
plt.legend()
plt.show()
