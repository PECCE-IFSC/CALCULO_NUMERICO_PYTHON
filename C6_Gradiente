# Cálculo numérico para engenharia elétrica com PYTHON
# Capítulo 6: Derivação numérica
# Gradiente


import matplotlib.pyplot as plt
import numpy as np
# resolução da imagem
x_range = y_range = np.arange(-2, 2, 0.2) # intervalo e quantidade de setas
X, Y = np.meshgrid(x_range, y_range)
# linhas de campo
E = np.multiply(X, np.exp(-(np.power(X, 2)) - np.power(Y, 2)))
dy, dx = np.gradient(E)
plt.figure(figsize=(10,10)) # Tamanho
plt.quiver(X, Y , dx, dy, pivot = "middle") # Setas
plt.axis("scaled") # Ajuste automático de escala
# superfícies equipotenciais geradas pelas duas cargas
xp = yp = np.arange(-2, 2, 0.1) 
X, Y = np.meshgrid(xp, yp)
E = np.multiply(X, np.exp(-(np.power(X,2)) - np.power(Y,2)))
d_o = 4
if (len(E)%2) != 0:
  l = int((len(E)+1)/2)
else:
    l = int((len(E))/2)
niveis = np.linspace(E[l][l- d_o], -E[l][l-d_o], 6) # niveis por onde passam interseccões do plano.
eqp = plt.contour(X, Y, E, levels = niveis) # linhas de contorno
plt.clabel(eqp)
# posicionamento das duas cargas
# carga elétrica negativa
x1= 0.70
y1= 0
# carga elétrica positiva
x2= -0.70
y2= 0
plt.plot(x1,y1, color='blue', marker='o', linestyle='dashed', markersize=7)
plt.plot(x2,y2, color='red', marker='o', linestyle='dashed', markersize=7)
plt.title('Campo Elétrico')
#plt.savefig("Campo_elétrico.png")
plt.show()
